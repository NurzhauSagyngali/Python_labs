import psycopg2
import csv

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(
    database="pp2",
    user="postgres",
    password="@@Ns2006",
    host="localhost",
    port="5432" 
)
cur = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
cur.execute("""
CREATE TABLE IF NOT EXISTS phonebook (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(50),
    phone VARCHAR(20) UNIQUE
)
""")
conn.commit()

def insert_from_csv(file_path):
    file_path = input("Enter path to CSV file: ")
    try:
        with open(file_path, newline='') as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:
                try:
                    cur.execute("INSERT INTO phonebook (first_name, phone) VALUES (%s, %s)", row)
                except psycopg2.Error as e:
                    print(f"‚ö†Ô∏è Failed to insert {row}: {e.pgerror.strip()}")
        conn.commit()
        print("‚úÖ CSV import complete.")
    except FileNotFoundError:
        print("‚ùå CSV file not found.")


# –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def insert_from_console():
    name = input("Enter name: ")
    phone = input("Enter phone: ")
    try:
        cur.execute("INSERT INTO phonebook (first_name, phone) VALUES (%s, %s)", (name, phone))
        conn.commit()
        print("‚úÖ Contact added.")
    except psycopg2.Error as e:
        print("‚ùå Error inserting data:", e.pgerror.strip())

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def update_contact():
    phone = input("Enter phone of contact to update: ")
    print("1. Change name\n2. Change phone")
    choice = input("Choose option: ")
    if choice == '1':
        new_name = input("Enter new name: ")
        cur.execute("UPDATE phonebook SET first_name = %s WHERE phone = %s", (new_name, phone))
    elif choice == '2':
        new_phone = input("Enter new phone: ")
        cur.execute("UPDATE phonebook SET phone = %s WHERE phone = %s", (new_phone, phone))
    else:
        print("‚ùå Invalid option.")
        return
    conn.commit()
    print("‚úÖ Contact updated.")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä—É
def delete_contact():
    identifier = input("Enter name or phone to delete: ")
    cur.execute("DELETE FROM phonebook WHERE first_name = %s OR phone = %s", (identifier, identifier))
    conn.commit()
    print("‚úÖ Contact deleted (if existed).")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
def view_all_contacts():
    cur.execute("SELECT * FROM phonebook")
    rows = cur.fetchall()
    if not rows:
        print("üì≠ PhoneBook is empty.")
    else:
        print("\nüì± PhoneBook Entries:")
        for row in rows:
            print(f"ID: {row[0]}, Name: {row[1]}, Phone: {row[2]}")

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä—É
def filter_contacts():
    value = input("Enter name or phone to search: ")
    cur.execute("SELECT * FROM phonebook WHERE first_name = %s OR phone = %s", (value, value))
    rows = cur.fetchall()
    if rows:
        for row in rows:
            print(f"üîç ID: {row[0]}, Name: {row[1]}, Phone: {row[2]}")
    else:
        print("‚ùå No matching contacts found.")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def menu():
    while True:
        print("\nüìñ PhoneBook Menu:")
        print("1. Upload from CSV")
        print("2. Add contact manually")
        print("3. Update contact")
        print("4. Delete contact")
        print("5. View all contacts")
        print("6. Filter contacts")
        print("0. Exit")

        choice = input("Choose option: ")

        if choice == '1':
            insert_from_csv("contacts.csv")
        elif choice == '2':
            insert_from_console()
        elif choice == '3':
            update_contact()
        elif choice == '4':
            delete_contact()
        elif choice == '5':
            view_all_contacts()
        elif choice == '6':
            filter_contacts()
        elif choice == '0':
            print("üëã Bye!")
            break
        else:
            print("‚ùå Invalid option. Try again.")

menu()

cur.close()
conn.close()

''' 
CREATE TABLE IF NOT EXISTS phonebook (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(50),
    phone VARCHAR(20) UNIQUE
);

INSERT INTO phonebook (first_name, phone)
VALUES 
('John', '87771234567'),
('Ali', '87001234567'),
('Nursultan', '87007775566');

SELECT * FROM phonebook;
'''